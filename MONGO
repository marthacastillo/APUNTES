MONGO
#Puerto
27017#VER QUE ESTE ESCUCHANDO


##DOCKER

sudo docker run -it --link martha-mongo:mongo --rm mongo sh -c 'exec mongo "$MONGO_PORT_27017_TCP_ADDR:$MONGO_PORT_27017_TCP_PORT/test"'

net stat -nap | grep LISTEN #CREAR BASE
use mybase
db.mycoll.find({})
db.mycollection.insert({field:'value'})
db.mycollection.find({})#MAYOR O IGUAL A 20 ... GTE ...LT,LTE,GT,EQn
db.usuarios.find({age:{$gte:20}})
#BUSQUEDA CON Y
db.usuarios.find({$and:[age:{$gte:20}}, {status:'z'}]})
ó con coma
db.usuarios.find({age:{$gte:20},status:'a'})#BUSQUEDA CON OR
db.usuarios.find({$or:[age:{$gte:20}}, {status:'z'}]})#OrDER BY
db.usuarios.find({age:{$gte:18}},{_id:0}).sort({age:-1})#LIMIT
db.usuarios.find({age:{$gte:18}},{_id:0}).sort({age:-1}).limit(3)#VER LA BASE EN LA QUE ESTAS
db.getName()#QUE EL CAMPO EXISTA
db.inventory.find({ar:{$exists:false}},{ar:1,_id:0})
#BANDERA TYPE
DB.COLLECTION.FIND({FIELD:{$TYPE:'DOUBLE'}})
DB.COLLECTION.FIND({FIELD:{$TYPE:'STRING'}})#BANDERA EXISTS
db.inventory.find({ar:{$exists:true}},{ar:1,_id:0})#BANDERA SLICE ... Una parte del arreglo
db.inventory.find({ar:{$exists:true}},{ar:{$slice:1},_id:0})
db.inventory.find({ar:{$exists:true}},{ar:{$slice:[2,1]},_id:0}) --> Posición 2, el                             siguiente caracter,los arreglos empiezan en 0
db.inventory.find({ar:{$exists:true}},{ar:{$slice:[0,1]},_id:0}) --> Posición 0, un número#BADERA IN
db.inventory.find({qty:{$in:[100]}})
db.inventory.find({qty:{$in:[100,75,21]}})
#MAYOR A 20 MENOS O IGUAL A 100
db.inventory.find({qty:{$gt:20, $lte:100}})
#QUE NO ESTEN ESAS CANTIDADES EN QTY (not in)
db.inventory.find({qty:{$nin:[100,75,21]}})#BANDERA ALL ... Todos los elementos deben existir en el arreglo
db.inventory.find({ar:{$exists:true, $all:[7,6,1]}},{ar:1},_id:0})#BANDERA ELEMMATCH para que al menos uno de los elementos cumpla la condición
db.inventory.find({ar:{$exists:true, $elemMatch:{$gte:4,$lte:7}}},{ar:1},_id:0})#BANDERA SIZE ... Tamaño del arreglo, por numero de elementos
db.inventory.find({ar:{$exists:true, $size:3}},{ar:1},_id:0})
ó
db.inventory.find({$or:{ar:{$exists:true, $size:3}},{ar:1},_id:0})

---000-----
db.users.aggregate([{$proyect:{name:1,type:1}}])
db.users.aggregate([{$match:{type:1}}])
db.users.aggregate([{$match:{type:1}},{$project:{name:1,type:1}}])
limit
db.users.aggregate([{$match:{type:1}},{$project:{name:1,type:1,_id:0,favorites:1,points:1}},{$limit:2}])
saltar 
db.users.aggregate([{$match:{type:1}},{$project:{name:1,type:1,_id:0,favorites:1,points:1}},{$limit:2},{$skip:1}])


descglozar un aareglo en dos documentos

db.users.aggregate([{$match:{type:1}},{$project:{name:1,type:1,_id:0,favorites:1,points:1}},{$unwind:"$points"}])


sort si lo ocupamos es ponerlos se car del match 
se enslista los campos conformae los quiero oredenar, cómo un tipo filtro 

gropup
nuevo documento el id a que campo va ser 


db.users.aggregate([{$match:{type:1}},{$project:{name:1,type:1,_id:0,favorites:1,points:1}},{$unwind:"$points"},{$group:{_id:"$name",promPuntos:{$avg:"$points.points"}}}])

debe de ir el unwind para que separe el arreglo en docmentos 

agrupar por nombre
> db.users.aggregate([{$project:{name:1,badges:1,points:1,_id:0}},{$unwind:"$points"},{$unwind:"$badges"},{$group:{_id:"$name",sumBonus:{$sum:"$points.bonus"}}}])

SIEMPRE DEBE DE ESTAR AL FINAL A DIFERENCIA DE OUTPOTS

OUTOPUT REDIRECCIONA LA SALIDA DE UN STAGE A UNA COLLECTIONS, SIONO ESTA LA CREA Y SI YA ESTA SOLO LA ADICIONA
COMO UN APPEND


db.users.aggregate([{$project:{name:1,badges:1,points:1,_id:0}},{$unwind:"$points"},{$unwind:"$badges"},{$group:{_id:"$name",sumBonus:{$sum:"$points.bonus"}}},{$out:"coleccionsalida"}])


counts:
cuanta los docs de el ultimo stage ylo pone con alias que osostros le pongamos 


db.users.aggregate([{$project:{name:1,badges:1,points:1,_id:0}},{$unwind:"$points"},{$unwind:"$badges"},{$group:{_id:"$name",sumBonus:{$sum:"$points.bonus"}}},{$count:"sha"}])


 db.users.aggregate([{$project:{name:1,badges:1,_id:0}},{$unwind:"$badges"},{$group:{_id:"$badges",toTalType:{$sum:1}}}])



 db.tw.find({text:/^@/},{text:1}).pretty()


The 
$elemMatch operator matches documents that contain an array field with at least one element that matches all the specified query criteria.
$nin que no este  dentro de los elemtos not in de un arreglo



$ne selects the documents where the value of the field is not equal (i.e. !=) to the specified value. This includes documents that do not contain the field.
#uso de or
db.p.find({borough:"Bronx",$or:[{cuisine:"American"},{cuisine:"Chinese"}]},{}).pretty()

db.p.find({$or:[{borough:"Staten"},{borough:"Queens"},{borough:"Bronxor Brooklyn"}]}).pretty()
#uso de $ne

db.p.find({cuisine:{$ne:"Chinees"},$or:[{name:/^Wil/}]},{name:1,cuisine:1}).pretty()
db.p.find({'grades.grade':"A",'grades.score':9,'grades.date':ISODate("2014-09-16T00:00:00Z")}).pretty()

$lt - ' $lte - ' $gte - '>='
$ne - '!='
$in - 'is in array'
$nin - '! in array'
###
#MOSTRAR LOS PRIMEROS 3
db.tw.find({},{}).sort({_id:-1}).limit(3).pretty()
#MOSTAR LOS ULIMOS 3 TWS 
db.tw.find({},{}).sort({_id:1}).limit(3).pretty()
$OBTENER TODOS LOS TW QUE CONTENGAN LA PALABA BBVA O BANCOMER
db.tw.find({$or:[{text:/.*BBVA/},{text:/.*BANCOMER/}]},{text:1}).pretty()


#MUESTRA CUANTOS TW FUERON CEADOS EN CADA LENGUAJE
db.tw.aggregate([{$group:{_id: "$lang", total:{$sum:1}}},{$sort:{total:-1}},{$project:{lenguaje:'$_id',_id:0,total:1}}])


#TOTAL DE TW POR LA UBICACION DEL USUARIO DE MANERA ASCENDENTE

db.tw.aggregate([{$match:{"user.location":{$ne:null}}},{$group:{_id: "$user.location",count: {$sum:1}}},{$sort:{count:-1}},{$project:{count:1, user_location:'$_id',_id:0}}])


#TOTAL DE HASHTAGS QUE HA SIDO USADOS

db.tw.aggregate([{$unwind: '$entities.hashtags'},{ $group: {_id: '$entities.hashtags.text',tagCount: {$sum: 1}}},{$project:{tagCount:1,hashtags:'$_id',_id:0}},{$sort:{tagCount:-1}}])

#QUIIEN  HHA  PUUBLIACADO MAS TWEETS

db.tw.aggregate([{$group:{_id:"$user.screen_name",total:{$sum:1}}},{$sort:{total:-1}},{$project:{nommbre:'$_id',_id:0,total:1}}])
#twetsss  popularres





db.tw.find({created_at:{$regex:".*2017-04-28.*"}},{created_at:1}).pretty()      .*hol[]
db.tw.find({created_at:{$regex:".*2017-04-26.*"}},{created_at:1}).pretty()
Los textos de aquellos tweets que tienen menos de 10 caracteres en su texto
# DE 16 A 17
db.tw.find({created_at:{$regex:'2017-04-28T1[(16)(17)].*'}}, {created_at:1})

If you specify a single query predicate in the $elemMatch expression, $elemMatch is not necessary.

Name 	Description
$all 	Matches arrays that contain all elements specified in the query.
$elemMatch 	Selects documents if element in the array field matches all the specified $elemMatch conditions.
$size 	Selects documents if the array field is a specified size.

The $all is equivalent to an $and operation of the specified values; i.e. the following statement:

{ tags: { $all: [ "ssl" , "security" ] } }


{ $and: [ { tags: "ssl" }, { tags: "security" } ] }




db.tw.find({"entities.hashtags":{$elemMatch:{text:"USA", indices:{$lte:0,$gte:4}}}})

mask rwx, permiso maximos qu  puede tener un directorio
solo super user o propetario puede cambiar los permisos

db.tw.find({"entities.hashtags.text":{$all:["USA", "Mexico"]}})

